#!/bin/bash

function file_list() {
	if [ -f .vimproj/files.list ]; then
		echo "remove files.list"
		rm -vf .vimproj/files.list
		touch .vimproj/files.list
	fi

	echo "create files.list"
	echo -n "search dirs: "
	echo -n -e '\e[;32m'
	echo $DIRS
	echo -n -e '\e[0m'

	for dir in $DIRS; do
		find $PWD/$dir -type f -name "*.h" \
			-o -type f -name "*.c" \
			-o -type f -name "*.cc" \
			-o -type f -name "*.cpp" \
			-o -type f -name "*.java" \
			>> .vimproj/files.list
	done

	find $PWD -maxdepth 1 -type f -name "*.h" \
		-o -type f -name "*.c" \
		-o -type f -name "*.cc" \
		-o -type f -name "*.cpp" \
		-o -type f -name "*.java" \
		>> .vimproj/files.list

	echo "create files.list successful"
}

function create_cscope() {

	new=y

	if [ -f .vimproj/cscope.out ]; then
		read -p "cscope tags already exist!  Re-create? [yes/no] " new
	fi

	if [[ "$new" == "y" ]] || [[ "$new" == "yes" ]]; then
		if [ -d arch ] && [ -f ~/.vim/ktags ]; then
			echo -e 'use [\e[;31mktags\e[0m] create cscope ...'
			time ktags cscope
		else
			file_list
			echo "create cscope.out ..."
			time cscope -bkq -i .vimproj/files.list
		fi

		mv -v cscope* .vimproj
		echo -e "\e[;32mdone. \e[0m"
	else
		return 0
	fi

	return 0
}

function create_ctags() {

	new=y

	if [ -f .tags ]; then
		read -p "tags already exists! Re-create? [yes/no] " new
	fi

	if [[ "$new" == "y" ]] || [[ "$new" == "yes" ]]; then
		if [ -d arch ] && [ -f ~/.vim/ktags ]; then
			echo -e 'use [\e[;31mktags\e[0m] create tags ...'
			time ktags tags
		else
			if [ ! -s .vimproj/files.list ]; then
				file_list
			fi

			echo "create tags ..."
			time ctags -L .vimproj/files.list --c-kinds=+p --c++-kinds=+p --java-kinds=+l --fields=+lS --links=no -f .tags
		fi

		echo -e "\e[;32mdone. \e[0m"
	fi

	return 0
}

function create_gtags() {

	new=y

	if [ -f .GTAGS ]; then
		read -p "gtags already exists! Re-create? [yes/no] " new
	fi

	if [[ "$new" == "y" ]] || [[ "$new" == "yes" ]]; then
		if [ -d arch ] && [ -f ~/.vim/ktags ]; then
			echo -e 'use [\e[;31mktags\e[0m] create gtags ...'
			time ktags gtags
		else
			if [ ! -s .vimproj/files.list ]; then
				file_list
			fi

			echo "create gtags ..."
			time gtags -f .vimproj/files.list
		fi

		echo -e "\e[;32mdone. \e[0m"
	fi

	return 0
}

function create_ftags() {

	new=y

	if [ -f .filenametags ]; then
		read -p "filename tags already exist! Re-create? [yes/no] " new
	fi

	if [[ "$new" == "y" ]] || [[ "$new" == "yes" ]]; then
		echo "create filenametags ..."

        time \
		(echo "!_TAG_FILE_SORTED        2       /2=foldcase/";
        (find $PWD -not -regex '.*\.\(jar\|gif\|jpg\|class\|exe\|dll\|pdd\|sw[op]\|xls\|doc\|pdf\|zip\|tar\|ico\|ear\|war\|dat\|png\|gif\|html\)' -type f -printf "%f\t%p\t1\n" | \
                sort -f )) > ./.filenametags

		echo -e "\e[;32mdone. \e[0m"
	fi

	return 0
}

function create_tag() {
	if [ -x /usr/local/bin/gtags ]; then
		echo "Gtags installed."
		create_gtags
	else
		create_cscope
		create_ctags
	fi
}

function create_ccglue() {
	ccglue -S .vimproj/cscope.out -o .vimproj/cctree.out
}

function create_dir() {
	if [ ! -d .vimproj ]; then
		mkdir -v .vimproj
	fi
}

function remove_file() {
	for file in .vimproj .tags .GTAGS .GRTAGS .GPATH .filenametags
	do
		if [ -f $file ] || [ -d $file ]; then
			rm -rvf $file
		fi
	done
}

function tag_status() {
	for file in .vimproj/cscope.out .tags .GTAGS .filenametags .vimproj/cctree.out
	do
		len=`expr length $file`
		pos=`expr "30" - $len`

		if [ -f $file ]; then
			files=${files}" "${file}
			echo -e "check $file index \033["$pos"C[\e[;32m ok \e[0m]"
		else
			echo -e "check $file index \033["$pos"C[\e[;31mfail\e[0m]"
		fi
	done

	echo "----------------------------------"
	if [ -n "$files" ]; then
		du -shc $files
		str=`du -skc $files`
		size=`echo $str | awk -F' ' '{split($0,str," ")}END{printf "%.2f\n",str[NF-1]/1024}'`
		echo -e "Total size \e[;35m$size\e[0mM"
	else
		echo -e "Total size \e[;35m0.00\e[0mM"
	fi
	echo "----------------------------------"
}

function error() {
	echo "Usage: tag [OPTION]..."
	echo "Try tag --help' for more information."
}

function usage() {
	echo "usage: tag  <command>"
	echo "       n | new     new create cscope and ctags index."
	echo "       a | all     recreate cscope and ctags index."
	echo "       cs| cscope  create cscope index."
	echo "       ct| ctag    create ctags index."
	echo "       cc| ccglue  create ccglue index."
	echo "       g | gtags   create gtags index."
	echo "       f | ftag    filenametags"
	echo "       c | clean   remove all tags files"
	echo "       s | status  check tag status"
	return 0
}

function version() {
	echo "tag v0.5 by oujf1 2011-11-11 11:11:11"
	echo "Addresses: <oujf@outlook.com>"
	exit 0
}

if [ -n "$1" ]; then
	[ "$1" = "-h" ] && usage
	[ "$1" = "-v" ] && version
	[ "$1" = "--help" ] && usage
fi

case $2 in
	"s" | "sub")
		DIRS=`ls -F | grep "/$"`
		;;
	"m" | "mtk")
		DIRS="frameworks kernel system mediatek packages bionic external libcore"
		;;
	*)
		DIRS=`ls -F | grep "/$"`
		;;
esac

case $1 in
	"n" | "new")
		remove_file
		create_dir
		create_tag
        create_ftags
		tag_status
		;;
	"a" | "all")
		create_dir
		create_tag
        create_ftags
		tag_status
		;;
	"g" | "gtags")
		create_dir
		create_gtags
		;;
	"cs" | "cscope")
		create_dir
		create_cscope
		;;
	"cc" | "ccglue")
		create_ccglue
		;;
	"ct" | "ctag" | "ctags")
		create_dir
		create_ctags
		;;
	"f" | "ftag")
		create_ftags
		;;
	"c" | "clean")
		remove_file
		;;
	"s" | "status")
		tag_status
		;;
	"")
		error
		;;
esac

